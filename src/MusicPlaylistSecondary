/**
 * Layered implementations of secondary methods for {@code SimpleWriter}.
 *
 * @author Nijaa Nishanth
 *
 */
public abstract class MusicPlaylistSecondary implements MusicPlaylist {

    /**
     * Shuffles the playlist to a different order than the original playlist.
     *
     * @updates this
     *
     * @ensures |#this| = |this| & #this /= this
     */
    void shuffle() {
        Queue<Map<String, String>> temp = new Queue1L<>();
        temp.transferFrom(this.playlist);
        while (temp.length() > 0) {
            Map<String, String> s = temp.front;
            String name = s.value("name");
            String artist = s.value("artist");
            this.playlist.removeSong(name);
            this.playlist.addSong(name, artist);
        }
    }

    /**
     * Adds a song directly after the current song.
     *
     * @param a
     *            the name of the artist of the song to be added
     *
     * @param n
     *            the name of the song to be added
     *
     * @updates this
     *
     * @ensures this = #this[0, 1) * n * #this[1, |#this|)
     *
     */
    void addToQueue(String n, String a) {
        Queue<Map<String, String>> temp = new Queue1L<>();
        temp.transferFrom(this.playlist);
        Map<String, String> s = temp.dequeue();
        this.playlist.addSong(s.value("name"), s.value("artist"));
        this.playlist.addSong(n, a);
        while(temp.length() > 1)
        {
            Map<String, String> s = temp.dequeue();
            this.playlist.addSong(s.value("name"), s.value("artist"));
        }
    }

    /**
     * Plays the playlist from the song specified and removes the songs before
     * it.
     *
     * @param n
     *            the name of the song to be added
     *
     * @updates this
     *
     * @return the songs removed from the playlist
     *          this = #this[n|#this|, |#this|)
     *
     */
    Queue<Map<String, String>> playFromSong(String n)
    {
        boolean songPassed = false;
        Queue passed = new Queue1L<>();
        while(!songPassed)
        {
            Map<String, String> s = this.playlist.front();
            if(s.value("name").equals(n))
            {
                songPassed = true;
                this.song = s;
            }
            else if
            {
                this.playlist.removeSong(s.value("name"));
                passed.addSong(s.value("name"), s.value("artist"));
            }
        }
        return passed;
    }

}